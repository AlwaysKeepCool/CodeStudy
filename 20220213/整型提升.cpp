#include <stdio.h>
int main()
{
	char a = -1;
	//10000000 00000000 00000000 00000001
	//11111111 11111111 11111111 11111110
	//11111111 11111111 11111111 11111111 -1的补码
	//把整型放入char型中被截断 一个字节 小端存储 截断为
	//11111111               a中存的数
	signed char b = -1;
	//11111111
	unsigned char c = -1;
	//11111111

	//a,b,c中存的数据是一样的，只是理解方式不同


	//此时a打印%d char->int 即需要整型提升
	printf("a=%d,b=%d,c=%d", a, b, c);//-1 -1 255
	//11111111->11111111 11111111 1111111 1111111->10000000 00000000 00000000 00000001
	//11111111->11111111 11111111 1111111 1111111->10000000 00000000 00000000 00000001
	//11111111->00000000 00000000 0000000 1111111->整数的原反补一样->255
	return 0;
}




#include<stdio.h>
int main()
{
	char a = 0xb6;
	//00000000 00000000 00000000 10110110
	//10110110       小端截断
	short b = 0xb600;
	//00000000 00000000 10110100 00000000
	//10110100 00000000       小端截断
	int c = 0xb6000000;   
	//10110110 00000000 00000000 00000000
	if (a == 0xb6)//此时==为操作符 发生整型提升
	//11111111 11111111 11111111 10110110 补码
	//11111111 11111111 11111111 10110101 反码
	//10000000 00000000 00000000 01001010 原码
		printf("a");
	if (b == 0xb600)
	//11111111 11111111 10110100 00000000
	//11111111 11111111 10110011 11111111
	//10000000 00000000 01001100 00000000
		printf("b");
	if (c == 0xb6000000)
		printf("c");
	return 0;
}




#include <stdio.h>
int main()
{
	char a = -128;
	//10000000 00000000 00000000 10000000
	//11111111 11111111 11111111 01111111 反码
	//11111111 11111111 11111111 10000000 补码
	//10000000 小端存储截断截断
	printf("%u\n", a);//4294967168
	//00000000 00000000 00000000 10000000 （%u）err 整型提升，这里容易用%u来提升 应该是让char的理解方式
	//11111111 11111111 11111111 10000000 (char)yes
	//因为unsigned int 此时上面的为正数 即4294967168
	return 0;
}




#include <stdio.h>
int main()
{
	char a = 128;
	//00000000 00000000 00000000 10000000
	//10000000  小端存储
	printf("%u\n", a);//4294967168
	//11111111 11111111 11111111 10000000整型提升->4294967168
	return 0;
}









#include<stdio.h>
int main()
{
	int i = -20;
	//10000000 00000000 00000000 00010100
	//11111111 11111111 11111111 11101011
	//11111111 11111111 11111111 11101100
	unsigned int j = 10;
	//00000000 00000000 00000000 00001010
	printf("%d\n", i + j);//-10
	//11111111 11111111 11111111 11110110 相加
	//11111111 11111111 11111111 11110101
	//10000000 00000000 00000000 00001010 ->-10 
	//按照补码的形式进行运算，最后格式化成为有符号整数
	return 0;
}


